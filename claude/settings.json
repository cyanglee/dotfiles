{
  "permissions": {
    "allow": [
      "Bash(ls)",
      "Bash(cat)",
      "Bash(head)",
      "Bash(tail)",
      "Bash(find)",
      "Bash(grep)",
      "Bash(pwd)",
      "Bash(whoami)",
      "Bash(which)",
      "Bash(git status)",
      "Bash(git log)",
      "Bash(git diff)",
      "Bash(git show)",
      "Bash(git branch)",
      "Bash(git remote -v)",
      "Bash(git add)",
      "Bash(git commit)",
      "Bash(git checkout)",
      "Bash(git reset)",
      "Bash(git push)",
      "Bash(git worktree)",
      "Bash(ruby -v)",
      "Bash(rails -v)",
      "Bash(node -v)",
      "Bash(yarn -v)",
      "Bash(bundle list)",
      "Bash(npm list)",
      "Bash(ps aux)",
      "Bash(top)",
      "Bash(df -h)",
      "Bash(free -h)",
      "Bash(bundle install)",
      "Bash(npm install)",
      "Bash(yarn install)",
      "Bash(pip install -r requirements.txt)",
      "Bash(rails test)",
      "Bash(rspec)",
      "Bash(npm test)",
      "Bash(yarn test)",
      "Bash(bundle exec rspec)",
      "Bash(rubocop)",
      "Bash(standardrb)",
      "Bash(eslint)",
      "Bash(prettier)",
      "Bash(bundle exec standardrb)",
      "Bash(bundle exec standardrb --fix)",
      "Bash(bundle exec rubocop)",
      "Bash(bundle exec rubocop --fix)",
      "Bash(rails db:migrate)",
      "Bash(rails db:seed)",
      "Bash(rails db:rollback)",
      "Bash(rails db:reset)",
      "Bash(rails db:setup)",
      "Bash(rails console)",
      "Bash(rails server)",
      "Bash(rails routes)",
      "Bash(rails generate migration)",
      "Bash(bundle exec rails test)",
      "Bash(bundle exec rails server)",
      "Bash(bundle exec rails console)",
      "Bash(bundle exec rails)",
      "Bash(bundle exec rails generate scenic:view)",
      "Bash(bundle update)",
      "Bash(gem list)",
      "Bash(rvm list)",
      "Bash(rbenv versions)",
      "Bash(npm run dev)",
      "Bash(yarn dev)",
      "Bash(npm run build)",
      "Bash(yarn build)",
      "Bash(npm run start)",
      "Bash(yarn start)",
      "Bash(npx next dev)",
      "Bash(npx next build)",
      "Bash(npx next start)",
      "Bash(npm run type-check)",
      "Bash(yarn type-check)",
      "Bash(npm run typecheck)",
      "Bash(yarn typecheck)",
      "Bash(npx tsc --noEmit)",
      "Bash(npm run lint)",
      "Bash(yarn lint)",
      "Bash(npx eslint .)",
      "Bash(npm run format)",
      "Bash(yarn format)",
      "Bash(npx prettier --write .)",
      "Bash(npx remix dev)",
      "Bash(npx remix build)",
      "Bash(npm run remix:dev)",
      "Bash(npm run remix:build)",
      "Bash(npx vite)",
      "Bash(npx vite build)",
      "Bash(npx vite preview)",
      "Bash(npm run vite:dev)",
      "Bash(npm run vite:build)",
      "Bash(npm run storybook)",
      "Bash(yarn storybook)",
      "Bash(npm run test:e2e)",
      "Bash(yarn test:e2e)",
      "Bash(npx playwright test)",
      "Bash(npx cypress run)",
      "Bash(npm run test:unit)",
      "Bash(yarn test:unit)",
      "Bash(npx jest)",
      "Bash(npx vitest)",
      "Bash(npx shadcn@latest add)",
      "Bash(gh pr create)",
      "Bash(mkdir)",
      "Bash(rm)",
      "Bash(pkill)",
      "Bash(unzip)",
      "Bash(bin/webpack-dev-server)",
      "Bash(bin/rails)",
      "Bash(RAILS_ENV=test bundle exec rails db:migrate)"
    ],
    "deny": []
  },
  "model": "opusplan",
  "statusLine": {
    "type": "command",
    "command": "python3 ~/.claude/pyccsl.py --env ~/.claude/pyccsl.env"
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \\\"$file_path\\\" | grep -q '\\\\.ts$'; then npx prettier --write \\\"$file_path\\\"; fi; }"
          }
        ]
      }
    ]
  }
}
